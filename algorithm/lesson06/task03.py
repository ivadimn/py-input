# 1. Подсчитать, сколько было выделено памяти под переменные
# в ранее разработанных программах в рамках первых трех уроков.
# Проанализировать результат и определить программы с наиболее эффективным использованием памяти.

# Используется задача вычисления  сумму n элементов следующего ряда чисел: 1, -0.5, 0.25, -0.125,…
# # Количество элементов (n) передаётся параметром.

#здесь сумма считается с использованием формулы суммы геометрической прогрессии

import sys
from funcs import show_sizeof, sizeof

print(sys.platform)
print(sys.version)

b1 = 1
q = -0.5
n = 100
summa  = b1 * (1 - q ** n) / (1 - q)

print("В алгоритме используетя 4 объекта 'b1', 'q', 'n','summa'")
size_b1 = sizeof(b1)
print(f"Размер объекта 'b1' = {size_b1}")
size_q = sizeof(q)
print(f"Размер объекта 'q' = {size_q}")
size_n = sizeof(n)
print(f"Размер объекта 'n' = {size_n}")
size_summa = sizeof(summa)
print(f"Размер объекта 'summa' = {size_summa}")
print(f"Суммарный размер объектов  = {size_b1 + size_q + size_n + size_summa}")


#linux
#3.6.8 (default, Oct  9 2019, 14:04:01)
#[GCC 5.4.0 20160609]
#В алгоритме используетя 4 объекта 'b1', 'q', 'n','summa'
#Размер объекта 'b1' = 28
#Размер объекта 'q' = 24
#Размер объекта 'n' = 28
#Размер объекта 'summa' = 24
#Суммарный размер объектов  = 104

# здесь общий размер не зависит от длины последовательности (нет объекта range())
#суммарная память намного меньше чем в предыдущих вариантах