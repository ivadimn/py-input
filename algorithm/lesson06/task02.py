# 1. Подсчитать, сколько было выделено памяти под переменные
# в ранее разработанных программах в рамках первых трех уроков.
# Проанализировать результат и определить программы с наиболее эффективным использованием памяти.

# Используется задача вычисления  сумму n элементов следующего ряда чисел: 1, -0.5, 0.25, -0.125,…
# # Количество элементов (n) передаётся параметром.

#здесь сумма последовательности считается сложением её членов
#с использованием других арифметических операций чем в варианте 1

import sys
from funcs import show_sizeof, sizeof

print(sys.platform)
print(sys.version)

b = 1
q = -0.5
summa = 1
for i in range(1, 100):
    summa += b * q
    b *= q

print("В алгоритме используетя 3 объекта 'q', 'summa', 'range(0, n)'")
size_q = sizeof(q)
print(f"Размер объекта 'q' = {size_q}")
size_summa = sizeof(summa)
print(f"Размер объекта 'summa' = {size_summa}")
size_range = sizeof(range(1, 100))
print(f"Размер объекта 'range(0, 100)' = {size_range}")
print(f"Суммарный размер объектов  = {size_q + size_summa + size_range}")

#linux
#3.6.8 (default, Oct  9 2019, 14:04:01)
#[GCC 5.4.0 20160609]
#В алгоритме используетя 3 объекта 'q', 'summa', 'range(1, n)'
#Размер объекта 'q' = 24
#Размер объекта 'summa' = 24
#Размер объекта 'range(1, 100)' = 2820
#Суммарный размер объектов  = 2868

# здесь также общий размер зависит от длины последовательности (размер объекта range(1, n))
#но здесь суммарная память немного меньше на 24 байта так как диапазон range(1, n) меньше на единицу